class MineSweeperHandler : EventHandler
{
	Array<Actor > ScannableThings;

	override void WorldThingSpawned(WorldEvent e)
	{
		if (
			!e.Thing ||
			!(e.Thing is "Mine") ||
			e.Thing is "UnderwaterMine" ||
			e.Thing.health <= 0 ||
			e.Thing.bDormant ||
			ScannableThings.Find(e.Thing) < ScannableThings.Size()
		) { return; }

		ScannableThings.push(e.Thing);
	}

	override void WorldThingDestroyed(WorldEvent e)
	{
		int i = ScannableThings.Find(e.Thing);

		if (i < ScannableThings.Size())
		{
			ScannableThings.Delete(i, 1);
			ScannableThings.ShrinkToFit();
		}
	}

	override void RenderOverlay( RenderEvent e )
	{
		PlayerInfo p = players[consoleplayer];

		if (!p || !p.mo) { return; }

		MineSweeper ms = MineSweeper(p.mo.FindInventory("MineSweeper"));

		if (ms && ms.active)
		{
			for (int i = 0; i < ScannableThings.Size(); i++)
			{
				Actor mo = ScannableThings[i];
				if (!mo) continue;

				double dist = p.mo.Distance3D(mo);
				if (dist > 512 ) { continue; }

				Vector3 worldpos = e.viewpos + level.Vec3Diff(e.viewpos, mo.pos); // World position of object, offset from viewpoint
				Vector3 screenpos = BoACoordUtil.WorldToScreen(worldpos, e.viewpos, e.viewpitch, e.viewangle, e.viewroll, p.fov); // Translate that to the screen, using the viewpoint's info

				if (screenpos.z > 1 || screenpos.z < -1) { continue; } // If the coordinates are off the screen, then skip drawing this item

				Vector2 drawpos = BoACoordUtil.ToViewport(screenpos);

				TextureID image = mo.SpawnState.GetSpriteTexture(0);

				Vector2 dimensions = TexMan.GetScaledSize(image);
				dimensions.x *= mo.scale.x;
				dimensions.y *= mo.scale.y;
				dimensions /= dist / 320 * p.fov / 90; // Scale with fov to account for zooming

				color clr = 0xDE1B15;
				double alpha = max(1.0 - (dist - 256) / 256, 0);

				screen.DrawTexture (image, false, drawpos.x, drawpos.y, DTA_DestWidthF, dimensions.x, DTA_DestHeightF, dimensions.y, DTA_AlphaChannel, true, DTA_FillColor, clr & 0xFFFFFF, DTA_Alpha, alpha);
			}
		}
	}
}

class OverdrawHandler : StaticEventHandler
{
	PlayerInfo p;

	override void RenderOverlay(RenderEvent e)
	{
		PlayerInfo p = players[consoleplayer];

		if (p)
		{
			Shader.SetUniform1f(p, "HeatOverdraw", "timer", gametic + e.FracTic);
			Shader.SetEnabled(p, "HeatOverdraw", true);
		}
	}
}